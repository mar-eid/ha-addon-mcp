ARG BUILD_FROM
FROM $BUILD_FROM AS builder

# Try to install full dependencies
RUN apk add --no-cache python3 py3-pip

WORKDIR /app
COPY requirements.txt ./

# Attempt to install packages, but don't fail the build
RUN pip3 install --break-system-packages --no-cache-dir \
    --prefer-binary --only-binary=:all: \
    mcp asyncpg fastapi uvicorn || \
    echo "Full dependencies failed, will use minimal version"

# Final stage
FROM $BUILD_FROM

# Install only essential packages
RUN apk add --no-cache python3 py3-pip curl

WORKDIR /app

# Copy both server versions
COPY server.py ./server-full.py
COPY server-minimal.py ./server-minimal.py
COPY run.sh ./
RUN chmod +x run.sh

# Try to copy installed packages from builder (if they exist)
COPY --from=builder /usr/lib/python3*/site-packages/ /usr/lib/python3.12/site-packages/ 2>/dev/null || true

# Create a smart run script that tries full version first
RUN cat > smart-run.sh << 'EOF'
#!/bin/ash
echo "🚀 Starting MCP Server with automatic fallback..."

# Try full version first
echo "Attempting full version with all features..."
if python3 -c "import mcp, fastapi, asyncpg; print('✅ All dependencies available')" 2>/dev/null; then
    echo "🎉 Using full version with database support"
    cp server-full.py server.py
    exec ./run.sh
else
    echo "⚠️ Full dependencies not available, using minimal version"
    echo "📦 Minimal version provides mock data for testing"
    cp server-minimal.py server.py
    exec ./run.sh
fi
EOF

RUN chmod +x smart-run.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8099/health 2>/dev/null || \
        python3 -c "import urllib.request; urllib.request.urlopen('http://localhost:8099/health', timeout=5)" || \
        exit 1

# Use smart runner
CMD ["./smart-run.sh"]